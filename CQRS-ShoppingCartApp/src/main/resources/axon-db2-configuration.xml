<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:context="http://www.springframework.org/schema/context"
       xmlns:axon="http://www.axonframework.org/schema/core"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        				   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.axonframework.org/schema/core http://www.axonframework.org/schema/axon-core-2.4.xsd
                           http://www.springframework.org/schema/tx
						   http://www.springframework.org/schema/tx/spring-tx-4.1.xsd ">
 
  
   <context:annotation-config/>

    <tx:annotation-driven transaction-manager="transactionManager"/>
   
    <!-- Define an command bus -->
    <axon:command-bus id="commandBus" transaction-manager="transactionManager" />
     
    <!-- Define an event bus -->
    <axon:event-bus id="eventBus"/>


    <!-- Create an async cluster -->
    <axon:cluster id="async">
        <!-- the inner bean defines the actual cluster implementation to use. Here, it is an asynchronous cluster -->
        <!-- Namespace support is not available, yet. See http://issues.axonframework.org/youtrack/issue/AXON-55 -->
        <bean class="org.axonframework.eventhandling.async.AsynchronousCluster">
            <constructor-arg value="async"/>
            <constructor-arg ref="asyncExecutor"/>
            <constructor-arg>
                <bean class="org.axonframework.eventhandling.async.FullConcurrencyPolicy"/>
            </constructor-arg>
        </bean>
        <!-- Here, we define which handlers we want to be part of this cluster -->
        <axon:selectors>
            <axon:package prefix="cqrs.example.shoppingcart.eventhandler"/>
        </axon:selectors>
    </axon:cluster>

    <!-- We also create a simple cluster, and we define it as default, meaning it will be selected when no other
         selectors (or clusters) match -->
    <axon:cluster id="simple" default="true"/>

    <!-- We need a thread pool to execute tasks -->
    <bean id="asyncExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean">
        <property name="corePoolSize" value="1"/>
        <property name="waitForTasksToCompleteOnShutdown" value="true"/>
    </bean>


 
    <axon:event-sourcing-repository id="shoppingCartRepository" 
                                    aggregate-type="cqrs.example.shoppingcart.model.ShoppingCart"/>
 
    <axon:aggregate-command-handler id="ShoppingCartHandler"
                                    aggregate-type="cqrs.example.shoppingcart.model.ShoppingCart"
                                    repository="shoppingCartRepository"                                  
                                    command-bus="commandBus" />
 
<!--     <axon:filesystem-event-store id="eventStore" base-dir="events"/> -->
 
 
    <axon:jpa-event-store id="eventStore" entity-manager-provider="myEntityManagerProvider"
                          event-serializer="eventSerializer" max-snapshots-archived="2" batch-size="1000"/>

 
    <bean id="myEntityManagerProvider" class="org.axonframework.common.jpa.ContainerManagedEntityManagerProvider" /> 	
 	 	 	
    <bean class="org.axonframework.commandhandling.gateway.CommandGatewayFactoryBean">
        <property name="commandBus" ref="commandBus"/>
    </bean>

    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations" value="classpath:db.database.properties"/>
    </bean>

    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="persistenceUnitName" value="eventstoredb"/>

        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
                <property name="databasePlatform" value="${hibernate.sql.dialect}"/>
                <property name="generateDdl" value="${hibernate.sql.generateddl}"/>
                <property name="showSql" value="${hibernate.sql.show}"/>
            </bean>
        </property>
        <property name="dataSource" ref="dataSource"/>
    </bean>
    
    
      <bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
       <property name="jndiName" value="jdbc/mydb"/>
    </bean>
    
  
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <bean id="eventSerializer" class="org.axonframework.serializer.xml.XStreamSerializer"/>

    
    
<!-- Enable annotation support to automatically register @EventHandler annotated beans -->
<!-- <axon:annotation-config /> -->

    <bean class="org.axonframework.eventhandling.annotation.AnnotationEventListenerBeanPostProcessor"> 
        <property name="eventBus" ref="eventBus"/>
    </bean>

 <!-- And we define our event listener beans -->
<!--     <bean class="cqrs.example.shoppingcart.eventhandler.ShoppingCartEventListener"/> -->


<bean class="org.axonframework.commandhandling.annotation.AnnotationCommandHandlerBeanPostProcessor">
        <property name="commandBus" ref="commandBus"/>
    </bean>

<bean class="cqrs.example.shoppingcart.model.ShoppingCart"/>

</beans>
